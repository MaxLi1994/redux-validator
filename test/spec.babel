/**
 * @fileOverview test suite
 * @author Max
 **/

import expect from 'expect.js';
import {compose, createStore, applyMiddleware} from 'redux';
import Reducer from './data/reducer';
import Validator from '../index';
import ThunkMiddleware from 'redux-thunk';

const finalCreateStoreWithDefaultKey = compose(
    applyMiddleware(Validator(), ThunkMiddleware)
)(createStore);
const finalCreateStoreWithCustomValidatorKey = compose(
    applyMiddleware(Validator({
        validatorKey: 'foo'
    }), ThunkMiddleware)
)(createStore);
const finalCreateStoreWithCustomParamKey = compose(
    applyMiddleware(Validator({
        paramKey: 'bar'
    }), ThunkMiddleware)
)(createStore);

describe('redux-validator', () => {
    it('validator undefined', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: 1,
            meta: {
            }
        };
        let result1 = dispatch(action1);
        expect(result1.type).to.be('action1');
    });
    it('plain payload', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: 1,
            meta: {
                validator: {
                    payload: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: -1,
            meta: {
                validator: {
                    payload: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1.type).to.be('action1');
        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: 'payload must greater than 0',
            id: 0,
            param: 'payload'
        });
    });
    it('multi param', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: {
                foo: 1,
                bar: 2
            },
            meta: {
                validator: {
                    foo: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    },
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: {
                foo: 1,
                bar: 20
            },
            meta: {
                validator: {
                    foo: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    },
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1.type).to.be('action1');
        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: '',
            id: 0,
            param: 'bar'
        });
    });
    it('mutil validators', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: {
                foo: 1,
                bar: 2
            },
            meta: {
                validator: {
                    foo: [
                        {
                            func: payload => payload > 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: payload => payload < 10,
                            msg: 'payload must greater than 0'
                        },
                    ],
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: {
                foo: 100,
                bar: 2
            },
            meta: {
                validator: {
                    foo: [
                        {
                            func: payload => payload > 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: payload => payload < 10,
                            msg: 'payload must less than 10'
                        },
                    ],
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1.type).to.be('action1');
        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: 'payload must less than 10',
            id: 1,
            param: 'foo'
        });
    });
    it('unexist param', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: {
                foo: 1
            },
            meta: {
                validator: {
                    foo: [
                        {
                            func: payload => payload > 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: payload => payload < 10,
                            msg: 'payload must less than 10'
                        },
                    ],
                    bar: {
                        func: payload => payload < 10,
                        msg: 'payload must less than 10'
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1).to.eql({
            err: 'validator',
            msg: 'payload must less than 10',
            id: 0,
            param: 'bar'
        });
    });
    it('thunk action', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: {
                foo: 1,
                thunk: dispatch => {return 'thunk success';},
                bar: 2
            },
            meta: {
                validator: {
                    foo: [
                        {
                            func: payload => payload > 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: payload => payload < 10,
                            msg: 'payload must greater than 0'
                        },
                    ],
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: {
                foo: 100,
                thunk: dispatch => {},
                bar: 2
            },
            meta: {
                validator: {
                    foo: [
                        {
                            func: payload => payload > 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: payload => payload < 10,
                            msg: 'payload must less than 10'
                        },
                    ],
                    bar: {
                        func: payload => payload < 10
                    }
                }
            }
        };
        const action3 = {
            type: 'action3',
            payload: {
                foo: 100,
                thunk: dispatch => {return 'thunk success';},
                bar: 2
            },
            meta: {
            }
        };


        let result1 = dispatch(action1);
        expect(result1).to.be('thunk success');
        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: 'payload must less than 10',
            id: 1,
            param: 'foo'
        });
        let result3 = dispatch(action3);
        expect(result3).to.be('thunk success');
    });
    it('default validation', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action2 = {
            type: 'action2',
            payload: undefined,
            meta: {
                validator: {
                    default: [
                        {
                            func: (payload, store) => store.foo < 0,
                            msg: 'payload must greater than 0'
                        },
                        {
                            func: (payload, store) => store.bar < 10,
                            msg: 'payload must less than 10'
                        },
                    ]
                }
            }
        };

        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: 'payload must greater than 0',
            id: 0,
            param: 'default'
        });
    });
    it('custom validator key', () => {
        const dispatch = finalCreateStoreWithCustomValidatorKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            payload: -1,
            foo: {
                validator: {
                    payload: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: -1,
            meta: {
                validator: {
                    payload: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1).to.eql({
            err: 'validator',
            msg: 'payload must greater than 0',
            id: 0,
            param: 'payload'
        });
        let result2 = dispatch(action2);
        expect(result2.type).to.be('action2');
    });
    it('custom param key', () => {
        const dispatch = finalCreateStoreWithCustomParamKey(Reducer).dispatch;
        const action1 = {
            type: 'action1',
            bar: -1,
            meta: {
                validator: {
                    bar: {
                        func: payload => payload > 0,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };
        const action2 = {
            type: 'action2',
            payload: -1,
            meta: {
                validator: {
                    bar: {
                        func: payload => payload !== undefined,
                        msg: 'payload must not be undefined'
                    }
                }
            }
        };

        let result1 = dispatch(action1);
        expect(result1).to.eql({
            err: 'validator',
            msg: 'payload must greater than 0',
            id: 0,
            param: 'bar'
        });
        let result2 = dispatch(action2);
        expect(result2).to.eql({
            err: 'validator',
            msg: 'payload must not be undefined',
            id: 0,
            param: 'bar'
        });
    });
    it('validator return boolean', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action2 = {
            type: 'action2',
            payload: -1,
            meta: {
                validator: {
                    payload: {
                        func: payload => 5,
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };

        let msg;
        try {
            dispatch(action2);
        } catch (e) {
            msg = e.message;
        }
        expect(msg).to.be('validator func must return boolean type');
    });
    it('no param', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action2 = {
            type: 'action2',
            meta: {
                validator: {
                    foo: {
                        func: payload => payload !== undefined,
                        msg: 'payload must not be undefined'
                    }
                }
            }
        };

        let result2 = dispatch(action2);
        expect(result2).to.be.eql({
            err: 'validator',
            msg: 'payload must not be undefined',
            id: 0,
            param: 'foo'
        });
    });
    it('validator func needed', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action2 = {
            type: 'action2',
            payload: -1,
            meta: {
                validator: {
                    payload: {
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };

        let msg;
        try {
            dispatch(action2);
        } catch (e) {
            msg = e.message;
        }
        expect(msg).to.be('validator func is needed');
    });
    it('validator func pass action.payload', () => {
        const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
        const action2 = {
            type: 'action2',
            payload: {
                foo: 1,
                bar: 2
            },
            meta: {
                validator: {
                    foo: {
                        func: (foo, state, payload) => {expect(payload).to.eql({foo:1,bar:2}); return true;},
                        msg: 'payload must greater than 0'
                    }
                }
            }
        };

        dispatch(action2);
    });

    describe('validates non-inherited properties', () => {
        let originalIncludes;
        beforeEach(() => {
            originalIncludes = Array.prototype.includes;
            Array.prototype.includes = function() {};
        });
        afterEach(() => Array.prototype.includes = originalIncludes);

        it('validator has non-inheritable properties', () => {
            const dispatch = finalCreateStoreWithDefaultKey(Reducer).dispatch;
            const action2 = {
                type: 'action2',
                payload: -1,
                meta: {
                    validator: {
                        payload: [{
                            msg: 'payload must greater than 0',
                            func: () => true
                        }]
                    }
                }
            };

            dispatch(action2);
        });
    });
});
